net {
  type = testnet  # Using testnet for local development
}

storage {
  db.engine = "LEVELDB",
  db.sync = false,
  db.directory = "database",
  transHistory.switch = "on",
  properties = []
  needToUpdateAsset = true
}

node.discovery = {
  enable = true
  persist = true
}

node {
  # trust node for solidity node
  trustNode = "127.0.0.1:50051"

  # expose extension api to public or not
  walletExtensionApi = true

  listen.port = 18888

  connection.timeout = 2
  fetchBlock.timeout = 200
  udpNettyWorkThreadNum = 1

  maxConnections = 30
  minConnections = 8
  minActiveConnections = 3
  maxConnectionsWithSameIp = 2
  maxHttpConnectNumber = 50

  minParticipationRate = 15

  isOpenFullTcpDisconnect = false
  inactiveThreshold = 600

  p2p {
    version = 20180622 # testnet version
  }

  active = []
  passive = []

  # HTTP API Configuration - These are the endpoints you'll access via browser
  http {
    fullNodeEnable = true
    fullNodePort = 8090        # Full Node HTTP API
    solidityEnable = true
    solidityPort = 8091        # Solidity Node HTTP API
    PBFTEnable = true
    PBFTPort = 8092           # PBFT HTTP API
  }

  # gRPC Configuration
  rpc {
    enable = true
    port = 50051              # Full Node gRPC
    solidityEnable = true
    solidityPort = 50061      # Solidity Node gRPC
    PBFTEnable = true
    PBFTPort = 50071          # PBFT gRPC

    maxConnectionIdleInMillis = 60000
    minEffectiveConnection = 1
  }
}

# Enable seed nodes (you can add your own if needed)
seed.node = {
  ip.list = []
}

# Genesis block configuration for testnet
genesis.block = {
  timestamp = "0"
  parentHash = "0xe58f33f9baf9305dc6f82b9f1934ea8f0ade2defb951258d50167028c780351f"
  hash = "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3"
  number = "0"
}

# VM Configuration
vm = {
  supportConstant = true
  minTimeRatio = 0.0
  maxTimeRatio = 5.0
  saveInternalTx = true

  # In rare cases, transactions that will be within the specified maximum execution time (default 10(ms)) are re-executed and packaged
  # longRunningTime = 10

  # Energy limit in one block for smart contract. This parameter is used to prevent DOS attacks.
  maxEnergyLimitForConstant = 100000000
}

committee = {
  allowCreationOfContracts = 1
  allowAdaptiveEnergy = 1
}

# Event plugin configuration
event.subscribe = {
  native = {
    useNativeQueue = true
    bindport = 5555
    sendqueuelength = 1000
  }

  path = ""
  server = ""
  dbconfig = ""
}

# Rate limiter configuration
rate.limiter = {
  http = [
    {
      component = "GetNowBlockServlet",
      strategy = "GlobalPreemptibleAdapter",
      paramString = "permit=1"
    },
    {
      component = "GetBlockByNumServlet",
      strategy = "GlobalPreemptibleAdapter", 
      paramString = "permit=1"
    }
  ]

  rpc = [
    {
      component = "protocol.Wallet/GetNowBlock2",
      strategy = "GlobalPreemptibleAdapter",
      paramString = "permit=1"
    },
    {
      component = "protocol.WalletSolidity/GetNowBlock2",
      strategy = "GlobalPreemptibleAdapter",
      paramString = "permit=1"
    }
  ]
}